
- Une fois le l'objet StreamingContext est démarré (ssc.start()) on pourrais pas lui rajouter d'autre traitement
ou configuration
- Si le SSC est arreté, on pourrais pas le redémarrer.
- Uniquement un seul objet StreamingContext peut etre actif en mm temps et dans la mm JVM
- A partir d'un seul objet spark context, on peut créer plusieur objet StreamingContext dont un seul qui pourrait etre actif
- La méthode stop() arrete aussi le context de spark core.

#############################################################################################################

- Les données sont représentées dans DStream
- Une DStream contient une série des RDD
- Chaque RDD représente un batch qui contient les données d'un interval du temps
- Chaque operation appliquée sur une DStream sera traduit en des opération sur les RDD sous-jacents

#############################################################################################################

- Input DStream :c'est une DStream initiale qui lit les données depuis une source streaming (exemples : kafka, netcat server..)
- Chaque InputStream est associé à un objet de type Receiver
- Un Receiver permet de recevoir les données depuis une source des données et les stockent dans la mémoire des exécteurs
pour les traiter.
- Pour consommer les données depuis plusieurs sources des données : il suffit de créer plusieurs InputStream
 => Ca va créer un Receiver pour chaque InputStream, et chaque Receiver va occuper un core dans le cluster

#############################################################################################################

Il y a deux types de source des données on se basant sur leur fiabilité.
Une source fiable est une source qui permet les données transférées d'etre reconnues (exemple : kafka).
i le système recevant les données de ces sources fiables reconnaît correctement les données reçues, il peut être assuré qu'aucune
donnée ne sera perdue en raison de tout type de panne. Cela conduit à deux types de récepteurs:
 **  Receiver fiable pour envoyer un acknowledgment à la source si les données sont bien reçues par spark
 et stockées dans ses exécuteurs
 ** Receiver non fiable : qui n'envoi pas un acknowledgment à la source
 On peut l'utiliser si la source ne supporte pas l'acknowledgment, ou si elle accepte mais on ne veut pas que les données
  soit reconnues à la réception